swagger: '2.0'
info:
  description: This is the RESTful API for managing Sessions in WSO2 Identity Server. The APIs provide the
    capability to retrieve/terminate active sessions of an authenticated user.
    In addition, APIs are available for privileged users to be invoked on behalf of another user
    to retrieve/delete sessions of the user.
  version: 'v1'
  title: WSO2 Identity Server - Session Management API
  contact:
    name: 'WSO2 Identity Server'
    url: 'https://wso2.com/identity-and-access-management/'
    email: 'architecture@wso2.com'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

schemes:
 - https
host: localhost:9443
basePath: /t/carbon.super/api/users/v1

# Tags are used for organizing operations.
tags:
- name: me
  description: Session management operations for the authenticated user.
- name: admin
  description: >
    Operations available for privileged users, to be invoked on behalf of another user.

# Applicable authentication mechanisms
security:
  - OAuth2: []
  - BasicAuth: []

paths:
  /me/sessions:
    get:
      tags:
        - me
      description: >
        A user can have multiple active sessions. This API retrieves information of all the active sessions of the authenticated user. <br>
        <b>Permission required:</b> <br>
        * None <br>
        <b>Scope required:</b> <br>
        * internal_login
      summary: Retrieve active sessions of the authenticated user
      operationId: getSessionsOfLoggedInUser
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/limitQueryParam'
        - $ref: '#/parameters/offsetQueryParam'
        - $ref: '#/parameters/filterQueryParam'
        - $ref: '#/parameters/sortQueryParam'
      responses:
        200:
          description: Successfully retrieved session information
          schema:
            $ref: '#/definitions/Sessions'
          examples:
            application/json:
              {
                "userId": "81fae417-13f6-4db6-9501-7ce128608cb5",
                "sessions": [
                  {
                    "applications": [
                      {
                        "subject": "admin",
                        "appName": "travelocity-requestpath",
                        "appId": "4"
                      },
                      {
                        "subject": "admin",
                        "appName": "avis-basic",
                        "appId": "5"
                      }
                    ],
                    "userAgent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1",
                    "ip": "127.0.0.1",
                    "loginTime": "1565586399249",
                    "lastAccessTime": "1565586435955",
                    "id": "30e775bcc2c858ff88584b38b017d6c703a6657f38320804a071ff82fce1a0fe"
                  }
                ]
              }
        401:
            $ref: '#/responses/Unauthorized'
        403:
            $ref: '#/responses/Forbidden'
        404:
            $ref: '#/responses/NotFound'
        500:
            $ref: '#/responses/ServerError'

    delete:
      tags:
        - me
      description: >
        A user has multiple active sessions. This API terminates all the active sessions of the authenticated user. <br>
        <b>Permission required:</b> <br>
        * None <br>
        <b>Scope required:</b> <br>
        * internal_login
      summary: Terminate all the active sessions of the authenticated user
      operationId: terminateSessionsByLoggedInUser
      responses:
        204:
          $ref: '#/responses/NoContent'
        400:
          $ref: '#/responses/InvalidInput'
        403:
          $ref: '#/responses/Forbidden'
        401:
          $ref: '#/responses/Unauthorized'
        500:
          $ref: '#/responses/ServerError'

  /me/sessions/{session-id}:
    delete:
      tags:
        - me
      description: >
        A user has multiple active sessions. This API terminates a specific session of the authenticated user identified by the session-id. <br>
        <b>Permission required:</b> <br>
        * None <br>
        <b>Scope required:</b> <br>
        * internal_login
      summary: Terminate a given session of the authenticated user
      operationId: terminateSessionByLoggedInUser
      parameters:
        - $ref: '#/parameters/sessionIdPathParam'
      responses:
        204:
          $ref: '#/responses/NoContent'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        500:
          $ref: '#/responses/ServerError'

  /{user-id}/sessions:
    get:
      tags:
        - admin
      description: Retrieves information related to the active sessions of a user identified by the user-id. <br>
        <b>Permission required:</b> <br>
           * /permission/admin/manage/identity/authentication/session/view <br>
        <b>Scope required:</b> <br>
           * internal_session_view
      summary: Get active sessions
      operationId: getSessionsByUserId
      parameters:
        - $ref: '#/parameters/userIdPathParam'
        - $ref: '#/parameters/limitQueryParam'
        - $ref: '#/parameters/offsetQueryParam'
        - $ref: '#/parameters/filterQueryParam'
        - $ref: '#/parameters/sortQueryParam'
      produces:
        - application/json
      responses:
        200:
          description: Successfully retrieved session information.
          schema:
            $ref: '#/definitions/Sessions'
        400:
            $ref: '#/responses/InvalidInput'
        401:
            $ref: '#/responses/Unauthorized'
        403:
            $ref: '#/responses/Forbidden'
        404:
            $ref: '#/responses/NotFound'
        500:
            $ref: '#/responses/ServerError'
    delete:
      tags:
        - admin
      description: Delete all the sessions of a user identified by the user-id. <br>
        <b>Permission required:</b> <br>
           * /permission/admin/manage/identity/authentication/session/delete <br>
        <b>Scope required:</b> <br>
           * internal_session_delete
      summary: Terminate all sessions
      operationId: terminateSessionsByUserId
      parameters:
        - $ref: '#/parameters/userIdPathParam'
      responses:
        204:
          $ref: '#/responses/NoContent'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        500:
          $ref: '#/responses/ServerError'

  /{user-id}/sessions/{session-id}:
    delete:
      tags:
        - admin
      description: Terminate a specific session of a user by the session-id. <br>
        <b>Permission required:</b> <br>
           * /permission/admin/manage/identity/authentication/session/delete <br>
        <b>Scope required:</b> <br>
           * internal_session_delete
      summary: Terminate a session
      operationId: terminateSessionBySessionId
      parameters:
        - $ref: '#/parameters/userIdPathParam'
        - $ref: '#/parameters/sessionIdPathParam'
      responses:
        204:
          $ref: '#/responses/NoContent'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        500:
          $ref: '#/responses/ServerError'

#-----------------------------------------------------
# Descriptions of common responses
#-----------------------------------------------------
responses:
  NotFound:
    description: Resource Not Found
  Unauthorized:
    description: Unauthorized
  ServerError:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/Error'
  NotImplemented:
    description: Not Implemented
    schema:
      $ref: '#/definitions/Error'
  InvalidInput:
    description: Invalid input request
    schema:
      $ref: '#/definitions/Error'
  Forbidden:
    description: Resource Forbidden
  OK:
    description: OK
  NoContent:
    description: No Content

definitions:
  #-----------------------------------------------------
  # The Application Response object
  #-----------------------------------------------------
  Application:
    type: object
    required:
      - subject
      - appName
      - appId
    properties:
      subject:
        type: string
        description: Username of the logged in user for the application.
        example: apiuser01
      appName:
        type: string
        description: Name of the application.
        example: sampleApp
      appId:
        type: string
        description: ID of the application.
        example: '012'

  #-----------------------------------------------------
  # The Session Response  object
  #-----------------------------------------------------
  Session:
    type: object
    properties:
      applications:
        type: array
        description: List of applications in the session.
        items:
          $ref: '#/definitions/Application'
      userAgent:
        type: string
        description: User agent of the session.
        example: 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1'
      ip:
        type: string
        description: IP address of the session.
        example: '172.95.192.63'
      loginTime:
        type: string
        description: Login time of the session.
        example: '1560412617'
      lastAccessTime:
        type: string
        description: Last access time of the session.
        example: '1560416196'
      id:
        type: string
        description: ID of the session.
        example: '8d9806d1-4efc-483e-a96a-a0fa77d4328b'

  #-----------------------------------------------------
  # The Sessions Response  object
  #-----------------------------------------------------
  Sessions:
    type: object
    properties:
      userId:
        type: string
        example: '00000001'
      sessions:
        type: array
        description: List of active sessions.
        items:
          $ref: '#/definitions/Session'

  #-----------------------------------------------------
  # Error  object
  #-----------------------------------------------------
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        example: "AAA-00000"
      message:
        type: string
        example: "Some Error Message"
      description:
        type: string
        example: "Some Error Description"
      traceId:
        type: string
        example: "e0fbcfeb-3617-43c4-8dd0-7b7d38e13047"

#--------------------
# Parameters
#--------------------
parameters:
    limitQueryParam:
      in: query
      name: limit
      required: false
      description: |
        Maximum number of records to return.
        _This parameter is not supported yet._
      type: integer
      format: int32
    offsetQueryParam:
      in: query
      name: offset
      required: false
      description: |
        Number of records to skip for pagination.
        _This parameter is not supported yet._
      type: integer
      format: int32
    filterQueryParam:
      in: query
      name: filter
      required: false
      description: |
        Condition to filter the retrival of records.
        _This parameter is not supported yet._
      type: string
    sortQueryParam:
      in: query
      name: sort
      required: false
      description: |
        Define the order in which the retrieved records should be sorted.
        _This parameter is not supported yet._
      type: string
    userIdPathParam:
      in: path
      name: user-id
      description: ID of the user.
      required: true
      type: string
    sessionIdPathParam:
      in: path
      name: session-id
      description: ID of the session.
      required: true
      type: string

#---------------------
# Security Definitions
#---------------------
securityDefinitions:
  BasicAuth:
    type: basic
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://localhost:9443/oauth2/authorize
    tokenUrl: https://localhost:9443/oauth2/token
    scopes:
      read: Grants read access
      write: Grants write access
      admin: Grants read and write access to administrative information

